import "engine_sim.mr"
import "../../part-library/part_library.mr"

units units()
constants constants()

label cycle(2 * 360 * units.deg)

public node c30a_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 8000 * units.rpm;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit)
            .connect_wire(wires.wire1, (0.0 / 6.0) * cycle)
            .connect_wire(wires.wire2, (1.0 / 6.0) * cycle)
            .connect_wire(wires.wire3, (2.0 / 6.0) * cycle)
            .connect_wire(wires.wire4, (3.0 / 6.0) * cycle)
            .connect_wire(wires.wire5, (4.0 / 6.0) * cycle)
            .connect_wire(wires.wire6, (5.0 / 6.0) * cycle);
}

public node c30a_camshaft_builder {
    input lobe_profile: comp_cams_magnum_11_470_8_lobe_profile();
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: lobe_profile;
    input lobe_separation: 106.0 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;
    input advance: 0.0 * units.deg;
    input base_radius: 0.75 * units.inch;

    output intake_cam_0: _intake_cam_0;
	output intake_cam_1: _intake_cam_1;
    output exhaust_cam_0: _exhaust_cam_0;
	output exhaust_cam_1: _exhaust_cam_1;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
	camshaft _intake_cam_1(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)
	camshaft _exhaust_cam_1(params, lobe_profile: exhaust_lobe_profile)

    label rot(2 * (360 / 6.0) * units.deg)
    label rot360(360 * units.deg)

    _exhaust_cam_0
        .add_lobe(rot360 - exhaust_lobe_center)
        .add_lobe(rot360 - exhaust_lobe_center + 2 * rot)
		.add_lobe(rot360 - exhaust_lobe_center + 4 * rot)
		
    _exhaust_cam_1
        .add_lobe(rot360 - exhaust_lobe_center + 1 * rot)
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot)
		.add_lobe(rot360 - exhaust_lobe_center + 5 * rot)

    _intake_cam_0
        .add_lobe(rot360 + intake_lobe_center)
        .add_lobe(rot360 + intake_lobe_center + 2 * rot)
		.add_lobe(rot360 + intake_lobe_center + 4 * rot)
		
    _intake_cam_1
        .add_lobe(rot360 + intake_lobe_center + 1 * rot)
        .add_lobe(rot360 + intake_lobe_center + 3 * rot)
		.add_lobe(rot360 + intake_lobe_center + 5 * rot)
}

public node c30a_camshaft {
    alias output __out:
        c30a_camshaft_builder(
            advance: 0 * units.deg,
            intake_lobe_center: 112 * units.deg,
            exhaust_lobe_center: 112 * units.deg);
}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
}

public node honda_c30a {
    alias output __out: engine;

    engine engine(
        name: "Honda C30A V6",
        starter_torque: 100 * units.lb_ft,
        starter_speed: 300 * units.rpm,
        redline: 8000 * units.rpm
    )

    wires wires()

    crankshaft c0(
        throw: 78 * units.mm / 2,
        flywheel_mass: 5 * units.lb,
        mass: 15 * 2 * units.lb,
        friction_torque: 10.0 * units.lb_ft,
        moment_of_inertia: 0.22986844776863666 * 1,
        position_x: 0.0,
        position_y: 0.0,
        tdc: -4 * constants.pi / 4.0 - constants.pi/6
    )

    rod_journal rj0(angle: 0.0 * constants.pi / 3.0)
	rod_journal rj2(angle: -4.0 * constants.pi / 6.0)
	rod_journal rj4(angle: -8.0 * constants.pi / 6.0)
	
	rod_journal rj1(angle: 1.0 * constants.pi / 6.0)
	rod_journal rj3(angle: -3.0 * constants.pi / 6.0)
	rod_journal rj5(angle: -7.0 * constants.pi / 6.0)
	
    c0
        .add_rod_journal(rj0)
		.add_rod_journal(rj1)
		.add_rod_journal(rj2)
		.add_rod_journal(rj3)
		.add_rod_journal(rj4)
		.add_rod_journal(rj5)

    piston_parameters piston_params(
        mass: 400 * units.g,
        //blowby: k_28inH2O(0.1),
        compression_height: 1.184 * units.inch,
        wrist_pin_position: 0.0,
        displacement: 0.0
    )

    connecting_rod_parameters cr_params(
        mass: 300.0 * units.g,
        moment_of_inertia: 0.0015884918028487504,
        center_of_mass: 0.0,
        length: 5.984 * units.inch
    )

    cylinder_bank_parameters bank_params(
        bore: 90 * units.mm,
        deck_height: (5.984 + 1.184) * units.inch + 78 * units.mm / 2
    )

    performer_rpm_intake intake(
        carburetor_cfm: 850.0,
        idle_flow_rate_cfm: 0.007,
        idle_throttle_plate_position: 0.985,
        throttle_gamma: 1.5
    )

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(1250.0),
        primary_tube_length: 10.0 * units.inch,
        primary_flow_rate: k_carb(350.0),
        velocity_decay: 0.4, //0.5
        volume: 50.0 * units.L
    )
	
    exhaust_system_parameters es_params1(
        outlet_flow_rate: k_carb(1250.0),
        primary_tube_length: 20.0 * units.inch,
        primary_flow_rate: k_carb(350.0),
        velocity_decay: 0.6, //0.5
        volume: 50.0 * units.L
    )

    impulse_response ir0(filename: "../../sound-library/smooth/smooth_39.wav", volume: 0.0009)
	impulse_response ir1(filename: "../../sound-library/smooth/smooth_39.wav", volume: 0.001)
	impulse_response ir2(filename: "../../sound-library/smooth/smooth_39.wav", volume: 0.0025)
    exhaust_system exhaust0(es_params, audio_volume: 10.0, impulse_response: ir0)
	exhaust_system exhaust1(es_params1, audio_volume: 8.0, impulse_response: ir1)
	exhaust_system exhaust2(es_params, audio_volume: 3.0, impulse_response: ir2)

    cylinder_bank b0(bank_params, angle: 45 * units.deg)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire1
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire3
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire5
        )
		
    cylinder_bank b1(bank_params, angle: -45 * units.deg)
    b1
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire2
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire4
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire6
        )

    engine
        .add_cylinder_bank(b0)
		.add_cylinder_bank(b1)

	engine.add_crankshaft(c0)
	
    c30a_camshaft camshaft()

    b0.set_cylinder_head (
        generic_small_engine_head(
            chamber_volume: 53.9 * units.cc,
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0
        )
    )
	
    b1.set_cylinder_head (
        generic_small_engine_head(
            chamber_volume: 53.9 * units.cc,
            intake_camshaft: camshaft.intake_cam_1,
            exhaust_camshaft: camshaft.exhaust_cam_1,
			flip_display: true
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 12 * units.deg)
        .add_sample(1000 * units.rpm, 12 * units.deg)
        .add_sample(2000 * units.rpm, 20 * units.deg)
        .add_sample(3000 * units.rpm, 30 * units.deg)
        .add_sample(4000 * units.rpm, 38 * units.deg)
        .add_sample(5000 * units.rpm, 38 * units.deg)
        .add_sample(6000 * units.rpm, 38 * units.deg)

    engine.add_ignition_module(
        c30a_distributor(
            wires: wires,
            timing_curve: timing_curve,
            rev_limit: 8000 * units.rpm
        ))
}
